# Copyright (c) 2023 Luca Cappa
# Released under the term specified in file LICENSE.txt
# SPDX short identifier: MIT
#
# The peculiarity of this workflow is that runs `vcpkg install` at `run-vcpkg`, rather than with `run-cmake.
# Also, it does not assume that vcpkg is a submodule of this repository.
#
# This workflow does the following:
# - Download and setup vcpkg (which is stored NOT in a Git submodule), then run `vcpkg install` to install the
#   packages described in vcpkg.json manifest file.
# - Notes: 
#     - at this point, all the vcpkg dependencies specified in vcpkg.json are installed, and it is possible to
#        run anything that is needed to build the C++ application.
#     - the vcpkg's `installed` directory is customized by setting the environment variable VCPKG_INSTALLED_DIR.
#
# - _Warning:_ in this sample, CMake is going to be used to build the application, but anything can be used. This
#   means that vcpkg will be run again and it will quickly realize that all dependencies are already installed.
#   In short: *it is not needed to run vcpkg* in the step before if you build with CMake, since CMake will run it
#   for you already! Look to (hosted-ninja-vcpkg_submod.yml)[./hosted-ninja-vcpkg_submod.yml] sample.
#
# - Finally, it runs CMake with CMakePreset.json and vcpkg's toolchain file to build the C++ sources with Ninja.
name: hosted-cargo-vcpkg-install-autocache
on: [push, workflow_dispatch]

jobs:
  job:
    name: ${{ matrix.os }}-${{ github.workflow }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            vcpkgCommitId: '253704407ae68efa37bf8f5b59b3e06dd40d3d3f'
          - os: ubuntu-latest
            vcpkgCommitId: '253704407ae68efa37bf8f5b59b3e06dd40d3d3f'
          - os: macos-latest
            vcpkgCommitId: '253704407ae68efa37bf8f5b59b3e06dd40d3d3f'

    env:
      VCPKG_INSTALLED_DIR: ${{ github.workspace }}/vcpkg-local-dir/installed

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Download dependencies
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
           sudo apt-get update && sudo apt-get install -y libpango1.0-dev libx11-dev libxext-dev libxft-dev libxinerama-dev libxcursor-dev libxrender-dev libxfixes-dev libudev-dev nasm libxcb-randr0-dev libusb-1.0-0-dev libdbus-1-dev ninja-build
          elif [ "$RUNNER_OS" == "macOS" ]; then
           brew install nasm ninja
          elif [ "$RUNNER_OS" == "Windows" ]; then
           choco install ninja
          fi
        shell: bash
      - name: List $RUNNER_WORKSPACE before build
        run: find $RUNNER_WORKSPACE
        shell: bash

      - name: Restore artifacts, or run vcpkg, build (and cache artifacts as post step)
        uses: lukka/run-vcpkg@dev/missing_vcpkgjson
        id: runvcpkg
        with:
          vcpkgDirectory: '${{ github.workspace }}/vcpkg-local-dir'
          vcpkgGitCommitId: '${{ matrix.vcpkgCommitId }}'
          # Run vcpkg with the command specified by the `runVcpkgFormatString` input.
          runVcpkgInstall: true
          vcpkgJsonGlob: '**/cargo/vcpkg.json'
          appendedCacheKey: vcpkginstall

      - name: Prints output of run-vcpkg's action.
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

      - name: Build with cargo
        shell: cmd
        run: |
          set PATH=C:\msys64\mingw64\bin;%PATH%
          cargo build --verbose
        working-directory: cargo
        if: matrix.os == 'windows-latest'

      - name: Build
        shell: bash
        run: cargo build --verbose
        working-directory: cargo
        if: matrix.os != 'windows-latest'

      - name: List $RUNNER_WORKSPACE after build
        run: find $RUNNER_WORKSPACE
        shell: bash

